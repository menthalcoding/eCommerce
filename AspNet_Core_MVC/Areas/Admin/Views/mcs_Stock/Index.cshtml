@model IEnumerable<eCommerce.Models.mcs_Stock>

@{
	ViewData["Title"] = "Index - mcs_Stock";
	Layout="~/Pages/Shared/_Layout.cshtml";
}
    
<h1>mcs_Stock - Index</h1>

<p>
    Web Api Functions:
    <input id="btn_Get" type="button" value="Get" />
    <input id="btn_Post" type="button" value="Post" />
    <input id="btn_Put" type="button" value="Put" />
    <input id="btn_Delete" type="button" value="Delete" />
</p>
<p>
    @Html.ActionLink("Create New", "Create", "mcs_Stock")
</p>
<table class="table table-striped" id="tbl_mcs_Stock">
    <thead>
        <tr class="tableCaption">
            <th>@Html.DisplayNameFor(model => model.StockId)</th>
            <th>@Html.DisplayNameFor(model => model.ProductId)</th>
            <th>@Html.DisplayNameFor(model => model.Quantity)</th>
            <th>@Html.DisplayNameFor(model => model.EntryPrice)</th>
            <th>@Html.DisplayNameFor(model => model.EntryDate)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
	@foreach (var item in Model) 
	{
        <tr>
            <td>@Html.DisplayFor(modelItem => item.StockId)</td>
            <td>@Html.DisplayFor(modelItem => item.ProductId)</td>
            <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
            <td>@Html.DisplayFor(modelItem => item.EntryPrice)</td>
            <td>@Html.DisplayFor(modelItem => item.EntryDate)</td>
            <td>
				@Html.ActionLink("Edit", "Edit", "mcs_Stock", new { StockId = item.StockId })
				@Html.ActionLink("Details", "Details", "mcs_Stock", new { StockId = item.StockId })
                @Html.ActionLink("Delete", "Delete", "mcs_Stock", new { StockId = item.StockId })

            </td>
        </tr>
	}
</tbody>
</table>

<script>
    $(document).ready(function () {
        $('#tbl_mcs_Stock').DataTable();
    });
</script>
<script>
    $(document).ready(function () {

        /////////////////////////////
        // IMPORTANT
        // The following code samples are provided as an example.
        // Security problems may occur.
        /////////////////////////////

        async function getData(url = '', data = {}) {
            // Default options are marked with *
            let token = "Get your token here, Store it in local storage and read it from local storage is a better method"
            const response = await fetch(url, {
                method: 'GET',
                mode: 'cors', // no-cors, *cors, same-origin
                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                credentials: 'same-origin', // include, *same-origin, omit
                headers: {
                    'Content-Type': 'application/json',
                    "Authorization": JwtBearerKey //This field value appears. It causes serious security problems.
                },
                redirect: 'follow', // manual, *follow, error
                referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                //body: JSON.stringify(data) // body data type must match "Content-Type" header
            });

            if (response.status != '200')
                alert(response.status + ' ' + response.statusText);

            return response.json(); // parses JSON response into native JavaScript objects
        }

        async function postData(url = '', data = {}) {
            // Default options are marked with *
            let token = "Get your token here, Store it in local storage and read it from local storage is a better method"
            const response = await fetch(url, {
                method: 'POST',
                mode: 'cors', // no-cors, *cors, same-origin
                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                credentials: 'same-origin', // include, *same-origin, omit
                headers: {
                    'Content-Type': 'application/json',
                    "Authorization": JwtBearerKey //This field value appears. It causes serious security problems.
                },
                redirect: 'follow', // manual, *follow, error
                referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                body: JSON.stringify(data) // body data type must match "Content-Type" header
            });

            if (response.status != '200')
                alert(response.status + ' ' + response.statusText);

            return response.json(); // parses JSON response into native JavaScript objects
        }

        $('#btn_Get').click(function () {
            getData('api/mcs_Stock', {})
                .then(data => {
                    alert(JSON.stringify(data)); // JSON data parsed by `data.json()` call
                });
        });

        $('#btn_Post').click(function () {
            var data = {
				StockId: '',
				ProductId: '',
				Quantity: '',
				EntryPrice: '',
				EntryDate: '',
            };
            postData('api/mcs_Stock', data)
                .then(data => {
                    alert(JSON.stringify(data)); // JSON data parsed by `data.json()` call
                });
        });

        $('#btn_Put').click(function () {
            var ids = '1';
            var data = {
				StockId: '',
				ProductId: '',
				Quantity: '',
				EntryPrice: '',
				EntryDate: '',
            };
            postData('api/mcs_Stock/update/' + ids, data)
                .then(data => {
                    alert(JSON.stringify(data)); // JSON data parsed by `data.json()` call
                });
        });

        $('#btn_Delete').click(function () {
            var ids = '2';
            postData('api/mcs_Stock/delete/' + ids, null)
                .then(data => {
                    alert(JSON.stringify(data));
                });
        });
    });
</script>
